{"version":3,"sources":["icons/logo.png","icons/combination.svg","icons/unsplited.svg","icons/code.svg","Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","props","AppWrapper","styled","div","HeaderWrapper","BodyWrapper","FooterWrapper","Logo","img","FeatureIcon","H1","h1","StyledYouTube","YouTube","strings","LocalizedStrings","en","top","download","title1","desc1","desc2","title2","desc3","desc4","title3","desc5","desc6","jp","setLanguage","lang","src","logo","className","alt","Button","variant","color","href","startIcon","videoId","combinationIcon","unsplitedIcon","codeIcon","App","AppBarWrapper","SelectBoxWrapper","StyledSelect","Select","AppBar","position","style","background","boxShadow","Toolbar","FormControl","value","onChange","event","history","push","target","MenuItem","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa57df66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f1b85863.png\";","module.exports = __webpack_public_path__ + \"static/media/combination.aad1de2f.svg\";","module.exports = __webpack_public_path__ + \"static/media/unsplited.86f10e9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/code.bb36b79e.svg\";","import React from 'react';\nimport styled from 'styled-components'\nimport YouTube from 'react-youtube';\nimport LocalizedStrings from 'react-localization';\n\n// icon\nimport logo from './icons/logo.png';\nimport combinationIcon from './icons/combination.svg'\nimport unsplitedIcon from './icons/unsplited.svg'\nimport codeIcon from './icons/code.svg'\n\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Button from '@material-ui/core/Button';\nimport { style } from '@material-ui/system';\n\nfunction Content(props) {\n\n    const url = \"https://apps.apple.com/us/app/notewind/id1482532727\";\n\n    const AppWrapper = styled.div`\n  text-align: center;\n  `\n    const HeaderWrapper = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  `\n\n    const BodyWrapper = styled.div`\n  padding: 10vmin;\n  `\n\n    const FooterWrapper = styled.div`\n  background-color: #282c34;\n  min-height: 10vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  `\n\n    const Logo = styled.img`\n    height: 40vmin;\n  `\n\n    const FeatureIcon = styled.img`\n    height: 15vmin;\n    padding: 4vmin;\n  `\n\n    const H1 = styled.h1`\n    padding-top: 4vmin;\n  `\n\n    const StyledYouTube = styled(YouTube)`\n    max-width: 80vw\n  `\n\n    let strings = new LocalizedStrings({\n        en: {\n            top: \"Any websites turn to your notebook.\",\n            download: \"Download\",\n            title1: \"Combination of Note and Browser\",\n            desc1: \"This is not only note app, but also web app.\",\n            desc2: \"You can move to other site. Then you can begin new note.\",\n            title2: \"Unsplit View\",\n            desc3: \"You don't need to convert to PDF anymore.\",\n            desc4: \"You can write on continuous page directly.\",\n            title3: \"Native Functions\",\n            desc5: \"Every web browser function\",\n            desc6: \"such as GIF image and javascript works correctly.\"\n        },\n        jp: {\n            top: \"どんなウェブサイトでも、あなたのノートに。\",\n            download: \"ダウンロード\",\n            title1: \"ノートとブラウザの組み合わせ\",\n            desc1: \"これは単なるノートではありません、ブラウザアプリでもあります。\",\n            desc2: \"他のサイトに移動することができ、移動先でノートを作成することもできます。\",\n            title2: \"連続した表示\",\n            desc3: \"ノートを取るために、もうウェブサイトをPDFに変換する必要はありません。\",\n            desc4: \"ひとつに繋がったノートに直接メモを書き込むことができます。\",\n            title3: \"ネイティブ機能\",\n            desc5: \"GIF画像やjavascriptなど、\",\n            desc6: \"ウェブサイト本来の機能をすべてノート上で使うことができます。\"\n        },\n    });\n\n    strings.setLanguage(props.lang);\n\n    return (\n        <AppWrapper>\n            <HeaderWrapper>\n                <Logo src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1>Notewind</h1>\n                <p>\n                    {strings.top}\n                </p>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    href={url}\n                    startIcon={<ArrowDownward />}\n                >\n                    {strings.download}\n                </Button>\n\n            </HeaderWrapper>\n            <BodyWrapper>\n                <StyledYouTube\n                    videoId=\"NKWGgBCmu6A\"\n                // opts={}\n                // onReady={}\n                />\n                <H1>\n                    {strings.title1}\n                </H1>\n                <FeatureIcon src={combinationIcon} />\n\n                <p>\n                    {strings.desc1}\n                </p>\n                <p>\n                    {strings.desc2}\n                </p>\n\n                <H1>\n                    {strings.title2}\n                </H1>\n                <FeatureIcon src={unsplitedIcon} />\n                <p>\n                    {strings.desc3}\n                </p>\n                <p>\n                    {strings.desc4}\n                </p>\n\n                <H1>\n                    {strings.title3}\n                </H1>\n                <FeatureIcon src={codeIcon} />\n                <p>\n                    {strings.desc5}\n                </p>\n                <p>\n                    {strings.desc6}\n                </p>\n            </BodyWrapper>\n\n            <FooterWrapper>\n                Copyright © Caprolactam2450 all rights reserved.\n      </FooterWrapper>\n        </AppWrapper>\n    );\n}\n\nexport default Content;\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport Content from './Content.js'\n\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Button from '@material-ui/core/Button';\nimport { style } from '@material-ui/system';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Input } from '@material-ui/core';\n\nfunction App(props) {\n  const handleChange = event => {\n    props.history.push('/Notewind-site/' + event.target.value)\n  };\n\n  const AppBarWrapper = styled.div`\n  `\n\n  const SelectBoxWrapper = styled.div`\n    margin-left: auto;\n  `\n\n  const StyledSelect = styled(Select)`\n    width: 100px;\n  `\n\n  return (\n    <AppBarWrapper >\n      <AppBar\n        position='absolute'\n        style={{ background: 'transparent', boxShadow: 'none' }} // styledComponent適応できず\n      >\n        <Toolbar>\n\n          <SelectBoxWrapper>\n            <FormControl>\n              <StyledSelect\n                value={props.lang}\n                onChange={handleChange}\n                style={{ color: 'white' }}\n              >\n                <MenuItem value={'en'}>English</MenuItem>\n                <MenuItem value={'jp'}>日本語</MenuItem>\n              </StyledSelect>\n            </FormControl>\n          </SelectBoxWrapper>\n\n        </Toolbar>\n      </AppBar>\n\n      <Content\n        lang={props.lang}\n      />\n    </AppBarWrapper >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    BrowserRouter,\n    Route\n} from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Router = () => (\n    <BrowserRouter >\n        <div>\n            <Route exact path='/' render={props => <App lang={'en'} {...props} />} />\n            <Route exact path='/Notewind-site/' render={props => <App lang={'en'} {...props} />} />\n            <Route exact path='/Notewind-site/en/' render={props => <App lang={'en'} {...props} />} />\n            <Route exact path='/Notewind-site/jp/' render={props => <App lang={'jp'} {...props} />} />\n        </div>\n    </BrowserRouter>\n)\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}